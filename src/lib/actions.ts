"use server";

import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import {
  createProject,
  updateProject,
  deleteProject as deleteProjectData,
  createTask,
  updateTask,
  deleteTask as deleteTaskData,
  createInvoice,
  updateInvoice,
  deleteInvoice as deleteInvoiceData,
  getInvoiceById,
  type Project,
  type Task,
  type Invoice,
  type InvoiceItem
} from "./definitions";
import { sendEmail } from '@/services/email'; // Assuming this service exists

// Project Actions
export async function createProjectAction(data: Omit<Project, "id" | "createdAt" | "updatedAt" | "tasks">) {
  try {
    const newProject = await createProject(data);
    revalidatePath("/projects");
    revalidatePath("/dashboard");
    return newProject;
  } catch (error) {
    console.error("Failed to create project:", error);
    throw new Error("Failed to create project.");
  }
}

export async function updateProjectAction(id: string, data: Partial<Omit<Project, "id" | "createdAt" | "updatedAt">>) {
  try {
    const updatedProject = await updateProject(id, data);
    if (!updatedProject) throw new Error("Project not found for update.");
    revalidatePath("/projects");
    revalidatePath(`/projects/${id}`);
    revalidatePath("/dashboard");
    return updatedProject;
  } catch (error) {
    console.error("Failed to update project:", error);
    throw new Error("Failed to update project.");
  }
}

export async function deleteProjectAction(id: string) {
  try {
    const success = await deleteProjectData(id);
    if (!success) throw new Error("Failed to delete project or project not found.");
    revalidatePath("/projects");
    revalidatePath("/dashboard");
    // Invoices linked to this project might need handling logic if strict relations are enforced
  } catch (error) {
    console.error("Failed to delete project:", error);
    throw new Error("Failed to delete project.");
  }
}

// Task Actions
export async function createTaskAction(projectId: string, data: Omit<Task, "id" | "projectId" | "createdAt" | "updatedAt">) {
  try {
    const newTask = await createTask(projectId, data);
    if (!newTask) throw new Error("Project not found for task creation or task creation failed.");
    revalidatePath(`/projects/${projectId}`);
    revalidatePath("/dashboard"); // If dashboard shows task counts etc.
    return newTask;
  } catch (error) {
    console.error("Failed to create task:", error);
    throw new Error("Failed to create task.");
  }
}

export async function updateTaskAction(projectId: string, taskId: string, data: Partial<Omit<Task, "id" | "projectId" | "createdAt" | "updatedAt">>) {
  try {
    const updatedTask = await updateTask(projectId, taskId, data);
    if (!updatedTask) throw new Error("Task not found for update or update failed.");
    revalidatePath(`/projects/${projectId}`);
    return updatedTask;
  } catch (error) {
    console.error("Failed to update task:", error);
    throw new Error("Failed to update task.");
  }
}

export async function deleteTaskAction(projectId: string, taskId: string) {
  try {
    const success = await deleteTaskData(projectId, taskId);
    if (!success) throw new Error("Failed to delete task or task not found.");
    revalidatePath(`/projects/${projectId}`);
    revalidatePath("/dashboard");
  } catch (error) {
    console.error("Failed to delete task:", error);
    throw new Error("Failed to delete task.");
  }
}

// Invoice Actions
// Type for invoice creation payload, excluding fields generated by the server/DB
type CreateInvoicePayload = Omit<Invoice, "id" | "invoiceNumber" | "createdAt" | "updatedAt">;

export async function createInvoiceAction(data: CreateInvoicePayload) {
  try {
    const newInvoice = await createInvoice(data);
    revalidatePath("/invoices");
    revalidatePath("/dashboard");
    return newInvoice;
  } catch (error) {
    console.error("Failed to create invoice:", error);
    throw new Error(`Failed to create invoice: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// Type for invoice update payload
type UpdateInvoicePayload = Partial<Omit<Invoice, "id" | "invoiceNumber" | "createdAt" | "updatedAt">>;

export async function updateInvoiceAction(id: string, data: UpdateInvoicePayload) {
  try {
    const updatedInvoice = await updateInvoice(id, data);
    if (!updatedInvoice) throw new Error("Invoice not found for update.");
    revalidatePath("/invoices");
    revalidatePath(`/invoices/${id}`);
    revalidatePath("/dashboard");
    return updatedInvoice;
  } catch (error) {
    console.error("Failed to update invoice:", error);
    throw new Error(`Failed to update invoice: ${error instanceof Error ? error.message : String(error)}`);
  }
}

export async function deleteInvoiceAction(id: string) {
  try {
    const success = await deleteInvoiceData(id);
    if (!success) throw new Error("Failed to delete invoice or invoice not found.");
    revalidatePath("/invoices");
    revalidatePath("/dashboard");
  } catch (error) {
    console.error("Failed to delete invoice:", error);
    throw new Error("Failed to delete invoice.");
  }
}

export async function sendInvoiceEmailAction(invoiceId: string, clientEmail: string) {
  try {
    const invoice = await getInvoiceById(invoiceId);
    if (!invoice) {
      throw new Error("Invoice not found.");
    }

    // Simplified email content
    const emailSubject = `Invoice ${invoice.invoiceNumber} from TaskBit`;
    const emailHtml = `
      <h1>Invoice ${invoice.invoiceNumber}</h1>
      <p>Dear ${invoice.clientName},</p>
      <p>Please find your invoice attached (or view it online: <a href="${process.env.NEXT_PUBLIC_APP_URL}/invoices/${invoice.id}">View Invoice</a>).</p>
      <p>Total Amount: $${invoice.totalAmount.toFixed(2)}</p>
      <p>Due Date: ${new Date(invoice.dueDate).toLocaleDateString()}</p>
      <p>Thank you for your business!</p>
      <br>
      <p>Best regards,</p>
      <p>TaskBit Team</p>
    `;

    await sendEmail({
      to: clientEmail,
      subject: emailSubject,
      html: emailHtml,
    });

    // Update invoice status to 'sent' if it was 'draft'
    if (invoice.status === 'draft') {
      await updateInvoice(invoiceId, { status: 'sent' });
    }
    
    revalidatePath("/invoices");
    revalidatePath(`/invoices/${invoiceId}`);
    revalidatePath("/dashboard");

    return { success: true, message: "Invoice sent successfully." };
  } catch (error) {
    console.error("Failed to send invoice email:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return { success: false, message: `Failed to send invoice: ${errorMessage}` };
  }
}
